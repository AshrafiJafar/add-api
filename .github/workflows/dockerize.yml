name: Build and Push Docker Image

on:
  push:
    tags:        # Trigger only on tags (e.g., v1.0.0)
      - 'v*'     #  Filter tags matching v*

jobs:
  build-and-push:
    runs-on: ubuntu-latest  # Use Ubuntu for the build environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Check out the code from the repository
        with:
          fetch-depth: 0 # Needed to fetch all tags

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21.0.6'
          distribution: 'temurin'

      - name: Get version from tag
        id: get_version
        run: |
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV #set env variable VERSION

      - name: Build with Maven
        run: mvn clean install # Build the Spring Boot application

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}  # Use secrets for credentials
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # Build from the root of the repository
          file: Dockerfile # Path to your Dockerfile
          push: true     # Push the image to Docker Hub
          tags: |
            ${{secrets.DOCKERHUB_USERNAME}}/add-api1:${{env.VERSION}}
            ${{secrets.DOCKERHUB_USERNAME}}/add-api1:latest
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{ secrets.AWS_REGION }}
    
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ${{secrets.AWS_REGION}} --name ${{secrets.EKS_CLUSTER_NAME}}
    
      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/loadbalancer.yaml
          kubectl rollout restart deployment/add-api


#git tag v1.0.0
#git push origin v1.0.0

#To delete created tag these command needed first delete locally and second delete from remote repository
#git tag -d v1.0.0
#git push origin --delete v1.0.0
